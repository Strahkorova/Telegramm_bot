import telebot
from telebot import types
from Class_vent import calculation, assimialtion_thermo_and_cool
import Class_vent

bot = telebot.TeleBot('7336100479:AAE_KgTsKoCwMe1rctfOIDtfw0HgOnLzk4E')


@bot.message_handler(commands=['start'])
#–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–µ–ª–∏
def start(mess):
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('/–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è')
    btn2 = types.KeyboardButton('/–¢–µ–ø–ª–æ- –∏ –•–æ–ª–æ–¥—Å–Ω–∞–±–∂–µ–Ω–∏–µ')
    btn3 = types.KeyboardButton('/–û—Ç–æ–ø–ª–µ–Ω–∏–µ')
    btn3 = types.KeyboardButton('/–•–æ–ª–æ–¥–∏–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞')
    btn4 = types.KeyboardButton('/–û—Ç–º–µ–Ω–∞')
    markup.row(btn1)
    markup.row(btn2, btn3)
    markup.row(btn4)
    bot.send_message(mess.chat.id, f'–ü—Ä–∏–≤–µ—Ç –ø–æ—Å–ª—É—à–Ω–∏–∫, {mess.from_user.first_name}!', reply_markup= markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "vent-1":
        bot.edit_message_text(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞:\n –ö—Ä—É–≥–ª—ã–π - /round \n –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π - /rectangle',
            call.message.chat.id, call.message.message_id, parse_mode='html')
    elif call.data == "vent-2":
        num = bot.send_message(call.message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ –≤ –º3/—á–∞—Å')
        bot.register_next_step_handler(num, scor_1)
    elif call.data == "vent-3":
        bot.edit_message_text(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞:\n –ö—Ä—É–≥–ª—ã–π - /round_1 \n –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π - /rectangle_1',
            call.message.chat.id, call.message.message_id, parse_mode='html')
    elif call.data == "vent-4":
        bot.edit_message_text(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞:\n –ù–∞–≥—Ä–µ–≤ - /heat \n –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ - /cool',
            call.message.chat.id, call.message.message_id, parse_mode='html')
    elif call.data == "vent-5":
        bot.edit_message_text(f'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –∞—Å—Å–∏–º–∏–ª—è—Ü–∏–∏:\n –£–¥–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–æ—Ç—ã - /delete_heat \n –£–¥–∞–≤–ª–µ–Ω–∏–µ –≤–ª–∞–≥–∏ - /delete_water',
            call.message.chat.id, call.message.message_id, parse_mode='html')


#–†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ —Å–µ—á–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞
def scor_1(message):
    global L
    L = message.text.replace(',', '.')
    operu = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –º/—Å')
    bot.register_next_step_handler(operu, scor_2)
def scor_2(message):
    calculation.ploshad(message, L)

#–∞—Å—Å–∏–º–∏–ª—è—Ü–∏—è —Ç–µ–ø–ª–æ- –∏ –≤–ª–∞–≥–æ–∏–∑–±—ã—Ç–∫–æ–≤
@bot.message_handler(commands=['delete_heat', 'delete_water'])
def open(message):
    global comm_assim
    comm_assim = message.text
    if comm_assim == '/delete_heat':
        num = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—è–µ–º–æ–π —Ç–µ–ø–ª–æ—Ç—ã –≤ –∫–í—Ç')
        bot.register_next_step_handler(num, plotnost_assim)
    elif comm_assim == '/delete_water':
        num = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—è–µ–º–æ–π –≤–ª–∞–≥–∏ –≤ –≥/—á–∞—Å')
        bot.register_next_step_handler(num, plotnost_assim)

def plotnost_assim(message):
    global Q
    Q = message.text.replace(',', '.')
    plot = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –∫–≥/–º3')
    bot.register_next_step_handler(plot, delta_first)

def delta_first(message):
    global p
    p = message.text.replace(',', '.')
    if comm_assim == '/delete_heat':
        num = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø—Ä–∏—Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞ –≤ ¬∫–°')
        bot.register_next_step_handler(num, delta_second)
    elif comm_assim == '/delete_water':
        num = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–ª–∞–≥–æ—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∏—Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞ –≥/–∫–≥')
        bot.register_next_step_handler(num, delta_second)

def delta_second(message):
    global t1
    t1 = message.text.replace(',', '.')
    if comm_assim == '/delete_heat':
        num = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É —É–¥–∞–ª—è–µ–º–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞ –≤ ¬∫–°')
        bot.register_next_step_handler(num, rash_assim)
    elif comm_assim == '/delete_water':
        num = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–ª–∞–≥–æ—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞ –≥/–∫–≥')
        bot.register_next_step_handler(num, rash_assim)

def rash_assim(message):
    assimialtion_thermo_and_cool.assimilation(message, Q, t1, p, comm_assim)





#–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–ø–ª–æ—Ç—ã –∏ —Ö–æ–ª–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–¥—É—Ö–∞
@bot.message_handler(commands=['heat', 'cool'])
def heat_and_cool(message):
    global heatcool
    heatcool = message.text
    num = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ –≤ –º3/—á–∞—Å')
    bot.register_next_step_handler(num, plotnost)

def plotnost(message):
    global L
    L = message.text.replace(',', '.')
    plot = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –∫–≥/–º3')
    bot.register_next_step_handler(plot, delta)

def delta(message):
    global p
    p = message.text.replace(',', '.')
    thermo = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –≤ –ö üòä')
    bot.register_next_step_handler(thermo, rash)

def rash(message):
    assimialtion_thermo_and_cool.thermo_cool(message, L, p, heatcool)



#–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞ –∏ —Ä–∞—Å—Ö–æ–¥ –≤ –∫—Ä—É–≥–ª–æ–º –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–µ
@bot.message_handler(commands=['round', 'round_1'])
def round_start(message):
    global round_com
    round_com = message.text
    num = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–º–µ—Ç—Ä –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞ –≤ –º–º')
    bot.register_next_step_handler(num, round_2)

def round_2(message):
    global D
    D = message.text.replace(',', '.')
    if round_com == '/round':
        operu = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ –≤ –º3/—á–∞—Å')
        bot.register_next_step_handler(operu, round_3)
    elif round_com == '/round_1':
        operu = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –º/—Å')
        bot.register_next_step_handler(operu, round_3)

def round_3(message):
    F = (3.14 * (float(D)/1000) ** 2) / 4
    if round_com == '/round':
        calculation.scorost(message, F)
    elif round_com == '/round_1':
        calculation.rashod(message, F)





#–†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞ –∏ —Ä–∞—Å—Ö–æ–¥ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–º –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–µ
@bot.message_handler(commands=['rectangle', 'rectangle_1'])
def rectangle_1(message):
    global rectangle_com
    rectangle_com = message.text
    num = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞ –≤ –º–º')
    bot.register_next_step_handler(num, rectangle_2)

def rectangle_2(message):
    global A
    A = message.text.replace(',', '.')
    num_2 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞ –≤ –º–º')
    bot.register_next_step_handler(num_2, rectangle_3)

def rectangle_3(message):
    global B
    B = message.text.replace(',', '.')
    if rectangle_com == '/rectangle':
        operu = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ –≤ –º3/—á–∞—Å')
        bot.register_next_step_handler(operu, rectangle_4)
    elif rectangle_com == '/rectangle_1':
        operu = bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –≤ –º/—Å')
        bot.register_next_step_handler(operu, rectangle_4)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')

def rectangle_4(message):
    F = (float(A)*float(B))/1000000
    if rectangle_com == '/rectangle':
        calculation.scorost(message, F)
    elif rectangle_com == '/rectangle_1':
        calculation.rashod(message, F)













@bot.message_handler(commands=['–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è'])
def ventil(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è', reply_markup=Class_vent.but_ventilation )




























bot.polling(non_stop=True)