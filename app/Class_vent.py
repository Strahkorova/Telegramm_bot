import telebot
import prettytable as pt
from config import bot
from dialogs import Sticers
class calculation:

    #–†–∞—Å—á–µ—Ç —Å–∫–æ—Å—Ä–æ—Ç–∏ –≤–æ–∑–¥—É—Ö–∞ –≤ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–µ
    def scorost(message, F):
        global L
        L = message.text.replace(',', '.')
        try:
            val = float(L) / (float(F) * 3600)
            bot.send_message(message.chat.id, (f'–°–∫–æ—Ä–æ—Å—Ç—å –≤ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–µ —Ä–∞–≤–Ω–∞ - {round(val, 1)} –º/—Å'))
        except:
            bot.send_message(message.chat.id, "–æ—à–∏–±–∫–∞ –≤–µ–¥–∏—Ç–µ /start")

    # –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞
    def ploshad_and_CAGI(message, L, cagi):
        global v
        v = message.text.replace(',', '.')
        try:
            if cagi == 'vent-2':
                F = float(L) / (float(v) * 3600)
                bot.send_message(message.chat.id, (f'–ü–ª–æ—â–∞–¥—å –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞ —Ä–∞–≤–Ω–∞ - {round(F, 5)} –º2'))
            elif cagi == 'vent-6':
                Do = 0.0188 * ((float(L) / (float(v))) ** 0.5) * 1000
                bot.send_message(message.chat.id, (f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–∏–∞–º–µ—Ç—Ä –¥–∏—Ñ–ª–µ–∫—Ç–æ—Ä–∞ —Ç–∏–ø–∞ –¶–ê–ì–ò - {round(Do, 0)} –º–º'))
        except:
            bot.send_message(message.chat.id, "–æ—à–∏–±–∫–∞ –≤–µ–¥–∏—Ç–µ /start")

    #–†–∞—Å—á–µ—Ç –æ–±—ä–µ–∫–º–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –≤–æ–∑–¥—É—Ö–∞
    def rashod(message, F):
        global v
        v = message.text.replace(',', '.')
        try:
            L = (float(F) * (float(v) * 3600))
            bot.send_message(message.chat.id, (f'–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ —Ä–∞–≤–µ–Ω - {round(L, 5)} –º3/—á–∞—Å'))
        except:
            bot.send_message(message.chat.id, "–æ—à–∏–±–∫–∞ –≤–µ–¥–∏—Ç–µ /start")


class assimialtion_thermo_and_cool:

    #–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–ø–ª–æ—Ç—ã –∏–ª–∏ —Ö–æ–ª–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–¥—É—Ö–∞
    def thermo_cool(message, L, p, comm):
        global dt
        dt = message.text.replace(',', '.')
        try:
            Q = (float(L) * float(p) * 1.005 * float(dt)) / 3600
            if comm == '/heat':
                bot.send_message(message.chat.id, (
                    f'–í–∞–º {message.from_user.first_name} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ - {round(Q, 2)} –∫–í—Ç –¥–ª—è –Ω–∞–≥—Ä–µ–≤–∞ –≤–æ–∑–¥—É—Ö–∞! ü•µ'))
            elif comm == '/cool':
                bot.send_message(message.chat.id, (
                    f'–í–∞–º {message.from_user.first_name} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ - {round(Q, 2)} –∫–í—Ç –¥–ª—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞! ü•∂'))
        except:
            bot.send_message(message.chat.id, "–æ—à–∏–±–∫–∞ –≤–µ–¥–∏—Ç–µ /start")

    #–†–∞—Å—Ö–æ–¥ –≤–æ–∑–¥—É—Ö–∞ –Ω–∞ –∞—Å—Å–∏–º–∏–ª—è—Ü–∏—é —Ç–µ–ø–ª–æ- –∏ –≤–ª–∞–≥–æ–∏–∑–±—ã—Ç–∫–æ–≤
    def assimilation(message, Q, t1, p, comm):
        global dt
        dt = message.text.replace(',', '.')
        if comm == '/delete_heat':
            L = (float(Q) * 3600) / (float(p) * 1.005 * (float(dt) - float(t1)))
            bot.send_message(message.chat.id, (
                f'–í–∞–º {message.from_user.first_name} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ - {round(L, 2)} –º3/—á–∞—Å –¥–ª—è —É–¥–∞–≤–ª–µ–Ω–∏—è {Q} –∫–í—Ç —Ç–µ–ø–ª–æ—Ç—ã! ü•µ'))
        elif comm == '/delete_water':
            L = float(Q) / ((float(dt) - float(t1)) * float(p))
            bot.send_message(message.chat.id, (
                f'–í–∞–º {message.from_user.first_name} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ - {round(L, 2)} –º3/—á–∞—Å –¥–ª—è —É–¥–∞–≤–ª–µ–Ω–∏—è {Q} –≥/—á–∞—Å –≤–ª–∞–≥–∏! üê≥'))


class thermo_refrigeration:

    #–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–µ–ø–ª–æ–Ω–æ—Å–∏—Ç–µ–ª—è
    def rashod_teplonositel(message, Q, dt, name):
        if name == '/water':
            G = float(Q) / (4.18 * float(dt))
            bot.send_message(message.chat.id, (f'–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞–≤–µ–Ω - {round(G, 3)} –∫–≥/—Å'))
        elif name == '/antifriz':
            cp = message.text.replace(',', '.')
            G = float(Q) / (float(cp) * float(dt))
            bot.send_message(message.chat.id, (f'–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥ –∞–Ω—Ç–∏—Ñ—Ä–∏–∑ –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞–≤–µ–Ω - {round(G, 3)} –∫–≥/—Å'))

    def scorost_teplonositel(message, G, type_tube):
        pw = message.text.replace(',', '.')

        plastic = {'20x3,4': 0.0001367, '25x4,2': 0.0002164, '32x5,4': 0.0003529, '40x6,7': 0.0005557,
                   '50x8,3': 0.0008761, '63x10,5': 0.001385, '75x12,5': 0.001963, '90x15': 0.002827}

        steel = {'20x2,8': 0.0001627, '25x2,8': 0.0002954, '32x2,8': 0.0005471, '40x3,0': 0.0009074,
                 '57x3,5': 0.001962, '76x3,5': 0.003737, '89x3,5': 0.005278, '108x4,0': 0.00785,
                 '133x4,5': 0.01207, '159x5,0': 0.01742, '219x6,0': 0.03428}

        cuprum = {'8x1,0': 0.00002826, '10x1,0': 0.00005024, '11x1,5': 0.00005024, '12x2,0': 0.00005024,
                  '13x1,5': 0.0000785, '13x2,0': 0.00006358, '26x2,0': 0.0003799, '45x3,0': 0.001194, '50x3,0': 0.001519}

        if type_tube == '/plastic':
            thermo_refrigeration.tube_scorost(message, G, pw, plastic)
        elif type_tube == '/steel':
            thermo_refrigeration.tube_scorost(message, G, pw, steel)
        elif type_tube == '/cuprum':
            thermo_refrigeration.tube_scorost(message, G, pw, cuprum)

    def tube_scorost(message, G, pw, dicty):
        data = []
        for tube, place in dicty.items():
            v = float(G) / (float(pw) * place)
            tube_scor = (tube, place, v)
            data.append(tube_scor)

        table = pt.PrettyTable(['–¢—Ä—É–±–∞, –º–º', '–ñ–∏–≤–æ–µ —Å–µ—á–µ–Ω–∏–µ, –º2', '–°–∫–æ—Ä–æ—Å—Ç—å, –º/—Å'])
        for tube, place, speed in data:
            table.add_row([tube, f'{place:.5f}', f'{speed:.3f}'])
        bot.send_message(message.chat.id, f'<pre>{table}</pre>', parse_mode='html')


class tools:

    def teploperedacha(message, tolshina, teploprov):
        k = 1/((1/8)+(float(tolshina)/1000) / float(teploprov)+(1/21))
        bot.send_message(message.chat.id, f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á–∏ –æ–¥–Ω–æ—Å–ª–æ–π–Ω–æ–π –æ–≥—Ä–∞–∂–¥–∞—é—â–µ–π —Å—Ç–µ–Ω–∫–∏ —Ä–∞–≤–µ–Ω - {round(k, 3)} –í—Ç/(–º2*–ö)')

    def koeff_teplo(message, dicty, a1, a2):
        data = []
        list_R = []
        n = 1
        for tolshina, teploprov in dicty.items():

            R = (float(tolshina)/1000) / float(teploprov)
            k_scor = (n, float(tolshina), float(teploprov), R)
            data.append(k_scor)
            list_R.append(R)
            n +=1

        SR = sum(list_R)
        k = 1/((1/float(a1))+SR+(1/float(a2)))

        table = pt.PrettyTable(['–°–ª–æ–π', '–¢–æ–ª—â–∏–Ω–∞, –º–º', ' é, –í—Ç/(–º2*–ö)', 'R, –í—Ç/(–º2*–ö)'])
        for n, b, v, r in data:
           table.add_row([n, f'{b:.1f}', f'{v:.3f}', f'{r:.2f}'])
        bot.send_message(message.chat.id, f'<pre>{table}</pre>', parse_mode='html')
        bot.send_message(message.chat.id, f'–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–ø–ª–æ–ø–µ—Ä–µ–¥–∞—á–∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ–π –æ–≥—Ä–∞–∂–¥–∞—é—â–µ–π —Å—Ç–µ–Ω–∫–∏ —Ä–∞–≤–µ–Ω - {round(k, 3)} –í—Ç/(–º2*–ö)')


    def temperature_conv(message, T, param):
        if param == '/K':
            C = float(T)-273.15
            F = float(T)*1.8-459.67
            R = float(T)*1.8
            bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É: \n –ö–µ–ª—å–≤–∏–Ω - {T} K \n –≥—Ä–∞–¥—É—Å –¶–µ–ª—å—Å–∏—è - {C} ‚ÑÉ \n '
                                              f'–≥—Ä–∞–¥—É—Å –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞ - {F} ‚Ñâ \n –≥—Ä–∞–¥—É—Å –†–µ–Ω–∫–∏–Ω–∞ - {R} ¬∞R', parse_mode='html')
        elif param == '/C':
            K = float(T)+273.15
            F = float(T)*1.8+32
            R = (float(T)+273.15)*1.8
            bot.send_message(message.chat.id,
                             f'–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É: \n –ö–µ–ª—å–≤–∏–Ω - {K} K \n –≥—Ä–∞–¥—É—Å –¶–µ–ª—å—Å–∏—è - {T} ‚ÑÉ \n '
                             f'–≥—Ä–∞–¥—É—Å –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞ - {F} ‚Ñâ \n –≥—Ä–∞–¥—É—Å –†–µ–Ω–∫–∏–Ω–∞ - {R} ¬∞R', parse_mode='html')
        elif param == '/F':
            K = (float(T)+459.67)*(5/9)
            C = (float(T)-32)*(5/9)
            R = float(T)+459.67
            bot.send_message(message.chat.id,
                             f'–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É: \n –ö–µ–ª—å–≤–∏–Ω - {K} K \n –≥—Ä–∞–¥—É—Å –¶–µ–ª—å—Å–∏—è - {C} ‚ÑÉ \n '
                             f'–≥—Ä–∞–¥—É—Å –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞ - {T} ‚Ñâ \n –≥—Ä–∞–¥—É—Å –†–µ–Ω–∫–∏–Ω–∞ - {R} ¬∞R', parse_mode='html')
        elif param == '/R':
            K = float(T)/1.8
            C = (float(T)/1.8)-273.15
            F = float(T) - 459.67
            bot.send_message(message.chat.id,
                             f'–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É: \n –ö–µ–ª—å–≤–∏–Ω - {K} K \n –≥—Ä–∞–¥—É—Å –¶–µ–ª—å—Å–∏—è - {C} ‚ÑÉ \n '
                             f'–≥—Ä–∞–¥—É—Å –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞ - {F} ‚Ñâ \n –≥—Ä–∞–¥—É—Å –†–µ–Ω–∫–∏–Ω–∞ - {T} ¬∞R', parse_mode='html')
